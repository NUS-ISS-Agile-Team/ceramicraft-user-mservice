// Code generated by mockery v2.53.5. DO NOT EDIT.

package mocks

import (
	context "context"

	gorm "gorm.io/gorm"

	mock "github.com/stretchr/testify/mock"

	model "github.com/NUS-ISS-Agile-Team/ceramicraft-user-mservice/server/repository/model"
)

// UserActivationDao is an autogenerated mock type for the UserActivationDao type
type UserActivationDao struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, activation, tx
func (_m *UserActivationDao) Create(ctx context.Context, activation *model.UserActivation, tx *gorm.DB) error {
	ret := _m.Called(ctx, activation, tx)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.UserActivation, *gorm.DB) error); ok {
		r0 = rf(ctx, activation, tx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteByUserId provides a mock function with given fields: ctx, userId, tx
func (_m *UserActivationDao) DeleteByUserId(ctx context.Context, userId int, tx *gorm.DB) error {
	ret := _m.Called(ctx, userId, tx)

	if len(ret) == 0 {
		panic("no return value specified for DeleteByUserId")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int, *gorm.DB) error); ok {
		r0 = rf(ctx, userId, tx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetByCode provides a mock function with given fields: ctx, code
func (_m *UserActivationDao) GetByCode(ctx context.Context, code string) (*model.UserActivation, error) {
	ret := _m.Called(ctx, code)

	if len(ret) == 0 {
		panic("no return value specified for GetByCode")
	}

	var r0 *model.UserActivation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*model.UserActivation, error)); ok {
		return rf(ctx, code)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.UserActivation); ok {
		r0 = rf(ctx, code)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.UserActivation)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, code)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Replace provides a mock function with given fields: ctx, activation
func (_m *UserActivationDao) Replace(ctx context.Context, activation *model.UserActivation) error {
	ret := _m.Called(ctx, activation)

	if len(ret) == 0 {
		panic("no return value specified for Replace")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.UserActivation) error); ok {
		r0 = rf(ctx, activation)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: ctx, activation, tx
func (_m *UserActivationDao) Update(ctx context.Context, activation *model.UserActivation, tx *gorm.DB) error {
	ret := _m.Called(ctx, activation, tx)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.UserActivation, *gorm.DB) error); ok {
		r0 = rf(ctx, activation, tx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewUserActivationDao creates a new instance of UserActivationDao. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserActivationDao(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserActivationDao {
	mock := &UserActivationDao{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Code generated by mockery v2.53.5. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	model "github.com/NUS-ISS-Agile-Team/ceramicraft-user-mservice/server/repository/model"
)

// UserAddressDao is an autogenerated mock type for the UserAddressDao type
type UserAddressDao struct {
	mock.Mock
}

// CreateUserAddress provides a mock function with given fields: ctx, address
func (_m *UserAddressDao) CreateUserAddress(ctx context.Context, address *model.UserAddress) (int, error) {
	ret := _m.Called(ctx, address)

	if len(ret) == 0 {
		panic("no return value specified for CreateUserAddress")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.UserAddress) (int, error)); ok {
		return rf(ctx, address)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.UserAddress) int); ok {
		r0 = rf(ctx, address)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.UserAddress) error); ok {
		r1 = rf(ctx, address)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDefaultAddress provides a mock function with given fields: ctx, userID
func (_m *UserAddressDao) GetDefaultAddress(ctx context.Context, userID int) (*model.UserAddress, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetDefaultAddress")
	}

	var r0 *model.UserAddress
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (*model.UserAddress, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) *model.UserAddress); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.UserAddress)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserAddresses provides a mock function with given fields: ctx, userID
func (_m *UserAddressDao) GetUserAddresses(ctx context.Context, userID int) ([]*model.UserAddress, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetUserAddresses")
	}

	var r0 []*model.UserAddress
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) ([]*model.UserAddress, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) []*model.UserAddress); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.UserAddress)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateUserAddress provides a mock function with given fields: ctx, address
func (_m *UserAddressDao) UpdateUserAddress(ctx context.Context, address *model.UserAddress) (int, error) {
	ret := _m.Called(ctx, address)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUserAddress")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.UserAddress) (int, error)); ok {
		return rf(ctx, address)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.UserAddress) int); ok {
		r0 = rf(ctx, address)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.UserAddress) error); ok {
		r1 = rf(ctx, address)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewUserAddressDao creates a new instance of UserAddressDao. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserAddressDao(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserAddressDao {
	mock := &UserAddressDao{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
